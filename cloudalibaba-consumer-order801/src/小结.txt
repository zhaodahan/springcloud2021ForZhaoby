这里是准备使用springCloudAlibaba

 使用nacos 作为 服务注册中心
先自己摸索一便

cloudalibaba-consumer-order801
1:消费者首先需要注册到nacos中去
2: 思考如何调用生产者
方案使用fegin
先把controller 整出来

先分别测试调用
验证生产者
http://localhost:8848/nacos

http://localhost:9001//payment/nacos/1
验证消费者调用生产者
http://localhost:8001//consumer/payment/get/2

成功了

再看着脑图弄一遍
cloud-consumerAlibaba-order802

===========================================脑图步骤总结：===================
1：pom 引入
主要两个；
spring cloud alibaba 整体jar
<!--spring cloud alibaba 2.1.0.RELEASE-->
<dependency>
  <groupId>com.alibaba.cloud</groupId>
  <artifactId>spring-cloud-alibaba-dependencies</artifactId>
  <version>2.1.0.RELEASE</version>
  <type>pom</type>
  <scope>import</scope>
</dependency>

引入nacos  用于nacos 服务注册发现
  <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
    </dependency>

还有就是监控jar
  <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

2：yml 配置文件配置
除了配置基本的端口和服务名
这个yml 主要配置的是nacos的注册地址
spring:
  application:
    name: XXXX
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 #配置Nacos地址

还有就是springboot 的监控管理需要开启
(exposure 暴露所有健康检查的接口)
management:
  endpoints:
    web:
      exposure:
        include: '*'

3：主启动类上除了正常的boot 应用注解，还要加上@EnableDiscoveryClient 标识该服务启用了服务发现功能
springboot 在启动的时候才会去加载相应的配置
@SpringBootApplication
@EnableDiscoveryClient

4： 实现业务类

5： 服务消费者上面步骤相同， 消费者也是一个微服务 需要注册到nacos 中去
不过，如果要使用Fegin 去调用生产者服务
pom 中需要引入 openfeign
  <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
  </dependency>

启动类中需要加上@EnableFeignClients 注解，表明这是一个Fegin 调用客户端
@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients

业务调用服务处需要 明确注解声明
@Component
@FeignClient(value = "nacos-payment-provider")
public interface PaymentFeignService {

===========================================脑图步骤总结：end===================
最后再看视频
cloud-consumerAlibaba-order803
===========================================视屏总结：===================
1： nacos 自带负载均衡
因为spring-cloud-starter-alibaba-nacos-discovery  中阿里集成了ribbon
ribbon负责负载均衡


===========================================视屏总结：end=================


下一步摸索 nacos 如何作为配置服务配置中

1： 自己摸索，思考原理
========================================================================================================================
作为服务配置中心
1：远程肯定需要存储我们的配置文件
本地服务是肯定是作为客户端， nacos 作为服务端。 只能将配置信息存储在nacos 中
如何配置，参考官网
https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_how_to_introduce_nacos_config_for_configuration
2：文件需要去远程拉去配置信息

肯定存在3步

1： 引入pom包
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
</dependency>

(注意：nacos-config 要放在 nacos-discovery 前， 否则IDEA 会报错)

2；nacos  管理台中配置配置文件

nacos 配置管理台上建立文件Data ID 使用"服务名.yml" 分组使用默认分组


3： 配置文件配置引入配置文件
需要在 bootstrap.yml 中配置 Nacos 服务器的地址和该服务对应使用的哪个文件
需要新建一个bootstrap.yml 文件
spring:
  application:
    name: nacos-payment-provider
  cloud:
    nacos:
      config:
        server-addr:127.0.0.1:8848
这里默认指定的配置为 GROUP为DEFAULT_GROUP  DataId为`spring.application.name` 配置结合文件扩展名（配置格式默认使用properties）


4： 业务代码使用配置文件中的信息

5: 测试结果： 发现无法启动生产者服务
可能原因， 在上面没有指定具体使用哪个配置文件
还有一个可能，nacos 中配置文件格式没有yml ,只有yaml 。
我们强加的配置文件后缀是yml

6: 修改配置文件后缀
修改后还是报错
Caused by: com.alibaba.nacos.api.exception.NacosException: endpoint is blank
查询发现是：源代码为判断了 serverAddrStr为空，然后endpoint 为空 所以抛出了异常。
检查了nacos config 配置的bootstarp.yml 发现配置文件配置的有问题
(这里还是需要注意)

bootstarp.yml 内容最终修改为
spring:
  application:
    name: nacos-payment-provider
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        file-extension: yaml

修改后发现启动成功，测试读取配置文件中的内容也是成功的

================================================================================================
2： 对照脑图自己操作
总结脑图步骤
1； pom 中引入nacos-config. 启用nacos 作为配置中心的功能

2：配置yml  bootstarp.yml (本地) + application.yml (远程/本地)
为什么需要两个配置文件
因为 nacos 和是springcloud 一样在项目初始化启动的时候需要先从远程拉取配置才能正常启动。
bootstarp.yml中配置的就是从哪个远程拉取哪个配置
springboot中配置文件的加载顺序 bootstarp.yml > application.yml
bootstarp.yml 也可以比作另外一种形式的 application.yml

bootstrap.yml 中定位nacos 中配置文件的规则
dataId 的默认格式是： ${prefix}-${spring.profiles.active}.${file-extension}
prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。
spring.profiles.active 即为当前环境对应的 profile
file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。
目前只支持 properties 和 yaml 类型。


3: nacos 中配置自动刷新
官网文档说支持自动刷新，不过是在版本 cloud greenwich.  这里是用得是Hoxton 。  albaba 版本2.1.2 。

这里版本比较低，需要自己加注解去刷新配置
使用方法： 在业务controller 中加上@RefreshScope 注解来实现配置自动更新
//https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html
（经测试，确实能够刷新配置）




================================================================================================
3： 观看视屏总结

1： 以前我们完成配置的自动刷新，需要结合springcloud config + bus . 现在我们将其解耦，直接全部整合进nacos. 使用nacos 来独立完成
    我们将配置文件的远程从github 迁移到nacos 上了

2；  bootstarp.yml 共性
     application.yml 个性   常在 application.yml 中指定开发环境  spring.profiles.active 用以切换不同环境的配置文件

3：@RefreshScope 注解的作用是，当远程配置发生变化，通知到客户端服务的时候，可以刷新服务应用去重新读取新的配置的值

================================================================================================

nacos 集群 和集群化配置 (重要)

生产环境上必定是要nacos 集群的。

如何配置nacos集群 (防止单点故障)？
https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html （运维集群部署）

生产环境配置集群需要准备：

1：生产部署环境Linux。
2：节点至少3个，主备模式 构建集群  (集群通过Nginx来进行转发)
3：外置数据源 。生产使用建议至少主备模式，或者采用高可用数据库 (mysql)。
(因为 nacos 中存储着 配置文件信息。 这些重要的配置文件信息为了安全可见 ，需要进行持久化)

为什么需要外置数据源？
因为nacos 默认使用的内嵌入式数据库来存储的数据。 即每个nacos 节点都内置一个数据库来存储数据
使用配置集群多个节点， 数据存储的一致性就存在问题。
nacos为了解决这个问题，采用了集中式存储的方式来支持集群化部署。 目前只支持mysql.

我们知道配置集群+配置文件的持久化都需要使用外置数据源， 然而nacos 已经内置了一个数据库，我们应该如何切换数据源？
如何从默认的derby 切换到MySQL?

按照官网文档需要两步
1：初始化mysql 数据库。 (配置数据库和建存储数据的表)
出事化sql脚本：  nacos-server-1.1.4\nacos\conf\nacos-mysql.sql

2：修改nacos启动的 application.properties 配置，配置上mysql的数据源

======================配置文件中搜索关键词 datasource.platform=====================
spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
db.user=root
db.password=123456
===========================================
完成上述两步重启后，就切换了数据源

====================================================如何开启集群：==================================================
官网文档教程： 1个nginx+3个nacos注册中心+1个mysql

1： 需要一个Nginx vip (virtual IP ) 所有请求都是经过Nginx 转发到nacos . （Nginx 也可配置为集群）
外部微服务只需要注册到一个ip 即可。
测试通过nginx访问nacos：https://写你自己虚拟机的ip:1111/nacos/#/login

2： 3个nacos 节点， 避免单点故障
核心 修改每个节点  nacos/conf/cluster.conf 配置文件
每行配置成ip:port。（配置3个或3个以上节点） 配置集群中节点的地址 (告诉nacos 我们这些节点属于一个集群)
如：
# ip:port
200.8.9.16:8848
200.8.9.17:8848
200.8.9.18:8848

(同一台机器 ，可以通过修改启动脚本，根据传入的不同端口，启动不同的nacos 实例 )
3： mysql外置数据源，统一数据源存储， 避免各自为战

=================================================================================================================

sentinel 是什么？ 流量控制，服务降级
核心作用是用于实现熔断和限流。 监控和保护我们的微服务。
分布式系统的流量防卫兵。 =》hystrix 的阿里版

理论原理：
1:Sentinel的核心是以“流量”为切入点。在流量控制、断路、负载保护等多个领域开展工作，保障服务可靠性
就是以流量为基础，进而通过控制流量，来进行断路和控制访问

2：sentinel的控制台由两部分组成。
类似hystrix ,
一个后台的微服务 核心库(后台的监控程序，maven引入jar包)，
一个dashboard 监控台8080端口 (前台的展示界面，基于springboot开发，打包后可运行，无需额外的Tomcat容器)。




sentinel 下载
https://github.com/alibaba/Sentinel/releases
这里下载的是个dashbord  jar 包,sentinel 的监控仪表盘

怎么使用？
https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel

sentinel dashboard  运行：
他以来于8080 端口，需要保证端口不被占用
他的本质是个jar包（jar 包如何运行？ Java -jar）
所以控制台的访问地址是：http://localhost:8080/#/login

核心库监控程序 安装进微服务

1: 引入pom
     <dependency>
            <groupId> com.alibaba.cloud </groupId>
            <artifactId> spring-cloud-starter-alibaba-sentinel </artifactId>
        </dependency>

2: 配置yml
spring:
  cloud:
    sentinel:
      transport:
        port: 8719
        dashboard: localhost:8080

spring.cloud.sentinel.transport.port
指定的端口号将在应用程序的相应服务器上启动一个 HTTP Server，该服务器将与 Sentinel 仪表板进行 交互 (中间人)。
例如，如果在 Sentinel 仪表板中添加了速率限制规则，则规则数据将被推送到 HTTP Server 并由 HTTP Server 接收，HTTP Server 进而将规则注册到 Sentinel。

3: 业务代码中使用@SentinelResource("XX")
  @GetMapping(value = "/payment/nacos/{id}")
    @SentinelResource("/payment")
    public String getPayment(@PathVariable("id") Integer id){}

4: 微服务应用需要进行访问过才能在dashboard 中监控到 (sentinel 使用的是懒加载机制，访问一次后才会触发)。

5： 问题： 感觉@SentinelResource("/payment") 这个资源配置似乎了没起作用？

==========================================================================
sentinel 流控规则
基础概念：
资源：唯一标识,默认为请求路径
流量阈值类型：
 QPS：每秒请求数量
 线程数： 调用该api 的线程数（同时有多个线程调用该api）


流控模式
 直接： 对该资源api 访问达到一定的阈值后进行限制
 关联： 当我们设置的 关联的资源达到阈值时，限制我们指定的资源 (监控的是我们关联的资源)
 链路： 从指定入口资源进入的链路上的流量达到阈值，就限制我们指定的资源


流控效果： 上面流控模式限制的效果
 快速失败： 直接失败，抛出异常
 warm up： 预热，通过预热达到指定的QPS.  QPS匀速上升，从阈值/codeFactor(冷加载因子)
 排队等待： 必须设置QPS .让超过阈值的请求排队，匀速通过


===========================================================================
sentinel 的持久化 (流控规则持久化)





















